{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","graph","setGraph","useEffect","fetch","then","res","json","sports","nodes","edges","data","forEach","id","label","attributes","name","relationships","children","related","map","sportChild","from","to","sportRelated","options","color","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAiDeA,MA9Cf,WAAgB,IAAD,EAEaC,qBAFb,mBAENC,EAFM,KAECC,EAFD,KAsCb,OAlCAC,qBAAU,WACRC,MAAM,2CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,IAAIC,EAAQ,GACRC,EAAQ,GAEZF,EAAOG,KAAKC,SAAQ,YAA0E,IAAxEC,EAAuE,EAAvEA,GAAuBC,EAAgD,EAAnEC,WAAaC,KAAsD,IAAxCC,cAAgBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC7EV,EAAK,sBAAOA,GAAP,CAAc,CACjBI,KACAC,WAGGI,EAASP,OACZD,EAAK,sBAAOA,GAAP,YAAiBQ,EAASE,KAAI,SAAAC,GAAU,MAAK,CAAEC,KAAMT,EAAIU,GAAIF,EAAWV,KAAKE,UAG/EM,EAAQR,OACXD,EAAK,sBAAOA,GAAP,YAAiBS,EAAQC,KAAI,SAAAI,GAAY,MAAK,CAAEF,KAAMT,EAAIU,GAAIC,EAAab,KAAKE,aAIzFX,EAAS,CAAEO,QAAOC,eAErB,IASIT,EACL,kBAAC,IAAD,CACEA,MAAOA,EACPwB,QAVY,CACdf,MAAO,CACLgB,MAAO,WAETC,OAAQ,YAQN,cClCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.eec5e3dd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Graph from \"react-graph-vis\";\n\nfunction App() {\n\n  const [graph, setGraph] = useState();\n\n  useEffect(() => {\n    fetch('https://sports.api.decathlon.com/sports')\n      .then(res => res.json())\n      .then(sports => {\n\n        let nodes = [];\n        let edges = [];\n        \n        sports.data.forEach(({id, attributes: {name: label}, relationships: {children, related}}) => {\n          nodes = [...nodes, {\n            id,\n            label,\n          }];\n\n          if (!children.data) {\n            edges = [...edges, ...children.map(sportChild => ({ from: id, to: sportChild.data.id })), ]\n          }\n\n          if (!related.data) {\n            edges = [...edges, ...related.map(sportRelated => ({ from: id, to: sportRelated.data.id })), ]\n          }\n        });\n\n        setGraph({ nodes, edges });\n      });\n  }, [])\n\n  const options = {\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"1000px\"\n  };\n\n  return graph ? (\n    <Graph\n      graph={graph}\n      options={options}\n    />\n  ) : 'Loading...';\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}